(in-package :aaf)

(defun three-arg-p (es)
  (= 3 (length (set-difference (union* es) nil))))

;;;
;;; Basefw
;;;

(defparameter *ud3-basefw-statistics*
  '((:REMOVED ((B C)) :ATTACKS ((B ZC) (C ZA) (ZB C) (ZC A)) :COUNT 2048)
    (:REMOVED ((A C)) :ATTACKS ((A ZB) (C ZA) (ZA B) (ZC A)) :COUNT 2048)
    (:REMOVED ((A B)) :ATTACKS ((A ZC) (B ZA) (ZA C) (ZB A)) :COUNT 2048)
    (:REMOVED ((A B C) (B C) (A C) NIL) :ATTACKS ((A C) (B C) (C A) (C B) (C ZC)) :COUNT 182016)
    (:REMOVED ((B C) (A B) (B) (A) NIL) :ATTACKS ((B ZA) (C ZC)) :COUNT 2048)
    (:REMOVED ((A B C) (B C) (A C) (A B) (B) (A) NIL) :ATTACKS ((A A) (B B) (C ZC)) :COUNT 38426112)
    (:REMOVED ((A B C) (B C) (A B) (B) (A) NIL) :ATTACKS ((B B) (C ZC)) :COUNT 2798336)
    (:REMOVED ((A C) (A B) (B) (A) NIL) :ATTACKS ((A ZB) (C ZC)) :COUNT 2048)
    (:REMOVED ((A B C) (A B) (B) (A) NIL) :ATTACKS ((A B) (C ZC)) :COUNT 201728)
    (:REMOVED ((A B C) (A C) (A B) (B) (A) NIL) :ATTACKS ((A A) (C ZC)) :COUNT 2798336)
    (:REMOVED ((A B) (B) (A) NIL) :ATTACKS ((C ZC)) :COUNT 49152)
    (:REMOVED ((B C) (A C) (C)) :ATTACKS ((C ZA) (C ZB)) :COUNT 7168)
    (:REMOVED ((A B C) (A C) (C) (B)) :ATTACKS ((A C) (B ZA) (C A) (C ZB)) :COUNT 3840)
    (:REMOVED ((A B C) (A C) (C) (B) NIL) :ATTACKS ((A C) (A ZA) (C A) (C ZB)) :COUNT 291328)
    (:REMOVED ((B C) (A C) (C) (B)) :ATTACKS ((B ZA) (C ZB)) :COUNT 1024)
    (:REMOVED ((A B C) (A B) (C) (A)) :ATTACKS ((A B) (A ZC) (B A) (C ZB)) :COUNT 3840)
    (:REMOVED ((A C) (A B) (C) (A)) :ATTACKS ((A ZC) (C ZB)) :COUNT 1024)
    (:REMOVED ((A B C) (A C) (C) (A)) :ATTACKS ((A C) (A ZB) (C ZB)) :COUNT 70912)
    (:REMOVED ((A C) (C) (A)) :ATTACKS ((A ZB) (C ZB)) :COUNT 17408)
    (:REMOVED ((B C) (A C) (C) (B) NIL) :ATTACKS ((A ZA) (C ZB)) :COUNT 2048)
    (:REMOVED ((A B C) (A C) (C)) :ATTACKS ((A C) (C ZB)) :COUNT 101120)
    (:REMOVED ((A C) (C)) :ATTACKS ((C ZB)) :COUNT 19456)
    (:REMOVED ((A B C) (B C) (C) (A) NIL) :ATTACKS ((A ZC) (B C) (C B) (C ZA)) :COUNT 291328)
    (:REMOVED ((A B C) (B C) (C) (A)) :ATTACKS ((A ZB) (B C) (C B) (C ZA)) :COUNT 3840)
    (:REMOVED ((A B C) (A B) (C) (B)) :ATTACKS ((A B) (B A) (B ZC) (C ZA)) :COUNT 3840)
    (:REMOVED ((B C) (A B) (C) (B)) :ATTACKS ((B ZC) (C ZA)) :COUNT 1024)
    (:REMOVED ((B C) (A C) (C) (A) NIL) :ATTACKS ((B ZB) (C ZA)) :COUNT 2048)
    (:REMOVED ((A B C) (B C) (C) (B)) :ATTACKS ((B C) (B ZA) (C ZA)) :COUNT 70912)
    (:REMOVED ((B C) (C) (B)) :ATTACKS ((B ZA) (C ZA)) :COUNT 17408)
    (:REMOVED ((A B C) (B C) (C)) :ATTACKS ((B C) (C ZA)) :COUNT 101120)
    (:REMOVED ((A B C) (A B) (C)) :ATTACKS ((A B) (B A) (C ZA)) :COUNT 95040)
    (:REMOVED ((B C) (A C) (C) (A)) :ATTACKS ((A ZB) (C ZA)) :COUNT 1024)
    (:REMOVED ((B C) (C)) :ATTACKS ((C ZA)) :COUNT 19456)
    (:REMOVED ((A B C) (B C) (A C) (C) (B)) :ATTACKS ((B ZA) (C C)) :COUNT 2730752)
    (:REMOVED ((A B C) (B C) (A C) (C) (A)) :ATTACKS ((A ZB) (C C)) :COUNT 2730752)
    (:REMOVED ((A B C) (B C) (A C) (C)) :ATTACKS ((C C)) :COUNT 14143488)
    (:REMOVED ((A B C) (B C) (A C) (B) (A)) :ATTACKS ((A ZA) (A ZC) (B C) (C A) (C B)) :COUNT 109568)
    (:REMOVED ((A B C) (B C) (A B) NIL) :ATTACKS ((A B) (B A) (B C) (B ZB) (C B)) :COUNT 182016)
    (:REMOVED ((A B C) (B C) (A B) (A) NIL) :ATTACKS ((B A) (B C) (B ZB) (C B)) :COUNT 607744)
    (:REMOVED ((A B C) (B C) (A C) (A) NIL) :ATTACKS ((A C) (B C) (B ZB) (C B)) :COUNT 607744)
    (:REMOVED ((A B C) (B C) (A C) (A B) (A) NIL) :ATTACKS ((A A) (B C) (B ZB) (C B)) :COUNT 15704064)
    (:REMOVED ((A B C) (B C) (A) NIL) :ATTACKS ((B C) (B ZB) (C B)) :COUNT 161472)
    (:REMOVED ((A B C) (B C) (B) (A)) :ATTACKS ((A ZC) (B C) (B ZA) (C B)) :COUNT 3840)
    (:REMOVED ((A B C) (B C) (B) (A) NIL) :ATTACKS ((A ZB) (B C) (B ZA) (C B)) :COUNT 291328)
    (:REMOVED ((A B C) (B C) (A B) (C) (A)) :ATTACKS ((A ZA) (A ZB) (B A) (B C) (C B)) :COUNT 109568)
    (:REMOVED ((A B C) (B C) (C) (B) (A) NIL) :ATTACKS ((A ZA) (A ZB) (B C) (C B)) :COUNT 787200)
    (:REMOVED ((A B C) (B C) (A)) :ATTACKS ((A ZB) (B C) (C B)) :COUNT 95040)
    (:REMOVED ((A B C) (B C) (A B) (C) (B)) :ATTACKS ((A ZA) (B A) (B B) (C B)) :COUNT 2730752)
    (:REMOVED ((A B C) (B C) (A B) (C)) :ATTACKS ((A ZA) (B A) (C B)) :COUNT 775936)
    (:REMOVED ((A B C) (A C) (B) (A)) :ATTACKS ((A C) (A ZB) (B ZC) (C A)) :COUNT 3840)
    (:REMOVED ((A B C) (A C) (A B) (C) (B)) :ATTACKS ((A B) (A C) (B ZA) (B ZB) (C A)) :COUNT 109568)
    (:REMOVED ((A B C) (B C) (A C) (A B) (C) (B) (A)) :ATTACKS ((A B) (A ZA) (A ZC) (B C) (B ZB) (C A)) :COUNT
     135241728)
    (:REMOVED ((A B C) (B C) (A C) (A B) (C) (B)) :ATTACKS ((A B) (A ZA) (B C) (B ZB) (C A)) :COUNT 135044608)
    (:REMOVED ((A B C) (B C) (A C) (A B) (C) (A)) :ATTACKS ((A A) (A B) (B C) (B ZB) (C A)) :COUNT 135044608)
    (:REMOVED ((A B C) (B C) (A C) (A B) (C)) :ATTACKS ((A B) (B C) (B ZB) (C A)) :COUNT 60049152)
    (:REMOVED ((A B C) (A C) (C) (B) (A) NIL) :ATTACKS ((A C) (A ZA) (B ZB) (C A)) :COUNT 787200)
    (:REMOVED ((A B C) (A C) (A B) (C) (A)) :ATTACKS ((A A) (A B) (B ZB) (C A)) :COUNT 2730752)
    (:REMOVED ((A B C) (A C) (A B) (C)) :ATTACKS ((A B) (B ZB) (C A)) :COUNT 775936)
    (:REMOVED ((A B C) (A C) (B)) :ATTACKS ((A C) (B ZA) (C A)) :COUNT 95040)
    (:REMOVED ((A B C) (B C) (A C) (A B) NIL) :ATTACKS ((A B) (A C) (A ZA) (B A) (B C) (C A)) :COUNT 2825280)
    (:REMOVED ((A B C) (B C) (A C) (B) (A) NIL) :ATTACKS ((A ZA) (A ZB) (B C) (C A)) :COUNT 4144128)
    (:REMOVED ((A B C) (B C) (A C) (B) NIL) :ATTACKS ((A C) (A ZA) (B C) (C A)) :COUNT 607744)
    (:REMOVED ((A B C) (B C) (A C) (A B) (B) NIL) :ATTACKS ((A C) (A ZA) (B B) (C A)) :COUNT 15704064)
    (:REMOVED ((A B C) (A C) (A B) NIL) :ATTACKS ((A B) (A C) (A ZA) (B A) (C A)) :COUNT 182016)
    (:REMOVED ((A B C) (A C) (B) (A) NIL) :ATTACKS ((A C) (A ZA) (A ZB) (C A)) :COUNT 291328)
    (:REMOVED ((A B C) (A C) (A B) (B) NIL) :ATTACKS ((A B) (A C) (A ZA) (C A)) :COUNT 607744)
    (:REMOVED ((A B C) (A C) (B) NIL) :ATTACKS ((A C) (A ZA) (C A)) :COUNT 161472)
    (:REMOVED ((A B C) (A C) (A B) (C) (B) (A) NIL) :ATTACKS ((A A) (B ZB) (B ZC)) :COUNT 18038784)
    (:REMOVED ((A C) (A B) (C) (B) (A) NIL) :ATTACKS ((B ZB) (B ZC)) :COUNT 36864)
    (:REMOVED ((B C) (A B) (B)) :ATTACKS ((B ZA) (B ZC)) :COUNT 7168)
    (:REMOVED ((A B C) (A B) (C) (B) (A) NIL) :ATTACKS ((A B) (A ZA) (A ZC) (B A) (B ZC)) :COUNT 787200)
    (:REMOVED ((A B C) (A C) (A B) (C) (B) NIL) :ATTACKS ((A B) (A C) (A ZA) (B A) (B ZC)) :COUNT 4144128)
    (:REMOVED ((A B C) (A B) (C) (B) NIL) :ATTACKS ((A B) (A ZA) (B A) (B ZC)) :COUNT 291328)
    (:REMOVED ((A B C) (A C) (A B) (B)) :ATTACKS ((A C) (B A) (B ZC)) :COUNT 775936)
    (:REMOVED ((A B C) (A B) (B) (A)) :ATTACKS ((A B) (A ZC) (B ZC)) :COUNT 70912)
    (:REMOVED ((A B) (B) (A)) :ATTACKS ((A ZC) (B ZC)) :COUNT 17408)
    (:REMOVED ((A C) (A B) (B) (A)) :ATTACKS ((A ZB) (B ZC)) :COUNT 1024)
    (:REMOVED ((B C) (A B) (C) (B) NIL) :ATTACKS ((A ZA) (B ZC)) :COUNT 2048)
    (:REMOVED ((A B C) (A B) (B)) :ATTACKS ((A B) (B ZC)) :COUNT 101120)
    (:REMOVED ((A B C) (A C) (A B) (B) (A)) :ATTACKS ((A A) (B ZC)) :COUNT 2730752)
    (:REMOVED ((A B) (B)) :ATTACKS ((B ZC)) :COUNT 19456)
    (:REMOVED ((A B C) (B C) (A C) (A B) (C) (A) NIL) :ATTACKS ((A A) (B C) (B ZB)) :COUNT 38426112)
    (:REMOVED ((A B C) (B C) (A C) (C) (A) NIL) :ATTACKS ((B C) (B ZB)) :COUNT 2798336)
    (:REMOVED ((A C) (A B) (C) (A) NIL) :ATTACKS ((A ZC) (B ZB)) :COUNT 2048)
    (:REMOVED ((A B C) (A C) (C) (A) NIL) :ATTACKS ((A C) (B ZB)) :COUNT 201728)
    (:REMOVED ((A B C) (A C) (A B) (C) (A) NIL) :ATTACKS ((A A) (B ZB)) :COUNT 2798336)
    (:REMOVED ((A C) (C) (A) NIL) :ATTACKS ((B ZB)) :COUNT 49152)
    (:REMOVED ((A B C) (B C) (B)) :ATTACKS ((B C) (B ZA)) :COUNT 101120)
    (:REMOVED ((B C) (A B) (B) (A)) :ATTACKS ((A ZC) (B ZA)) :COUNT 1024)
    (:REMOVED ((A B C) (B C) (A C) (B)) :ATTACKS ((A C) (B ZA)) :COUNT 775936)
    (:REMOVED ((B C) (B)) :ATTACKS ((B ZA)) :COUNT 19456)
    (:REMOVED ((A B C) (B C) (A B) (C) (A) NIL) :ATTACKS ((A B) (A ZA) (A ZC) (B A) (B C)) :COUNT 4144128)
    (:REMOVED ((A B C) (B C) (A C) (A B) (C) NIL) :ATTACKS ((A B) (A C) (A ZA) (B A) (B C)) :COUNT 15704064)
    (:REMOVED ((A B C) (B C) (A B) (C) NIL) :ATTACKS ((A B) (A ZA) (B A) (B C)) :COUNT 607744)
    (:REMOVED ((A B C) (B C) (A B) (A)) :ATTACKS ((A B) (A ZC) (B C)) :COUNT 775936)
    (:REMOVED ((A B C) (B C) (A C) (A)) :ATTACKS ((A ZB) (B C)) :COUNT 775936)
    (:REMOVED ((A B C) (B C) (C) (B) NIL) :ATTACKS ((A ZA) (B C)) :COUNT 201728)
    (:REMOVED ((A B C) (B C) (A C) (A B)) :ATTACKS ((A B) (A C) (B C)) :COUNT 14583488)
    (:REMOVED ((A B C) (B C) (A C)) :ATTACKS ((A C) (B C)) :COUNT 3598080)
    (:REMOVED ((A B C) (B C) (A B)) :ATTACKS ((A B) (B C)) :COUNT 3598080)
    (:REMOVED ((A B C) (B C) (A C) (A B) (A)) :ATTACKS ((A A) (B C)) :COUNT 60049152)
    (:REMOVED ((A B C) (B C)) :ATTACKS ((B C)) :COUNT 956928)
    (:REMOVED ((A B C) (B C) (A B) (B) (A)) :ATTACKS ((A ZC) (B B)) :COUNT 2730752)
    (:REMOVED ((A B C) (B C) (A C) (A B) (B)) :ATTACKS ((A C) (B B)) :COUNT 60049152)
    (:REMOVED ((A B C) (B C) (A C) (A B) (B) (A)) :ATTACKS ((A A) (B B)) :COUNT 135044608)
    (:REMOVED ((A B C) (B C) (A B) (B)) :ATTACKS ((B B)) :COUNT 14143488)
    (:REMOVED ((A B C) (A B) (C) (A) NIL) :ATTACKS ((A B) (A ZA) (A ZC) (B A)) :COUNT 291328)
    (:REMOVED ((A B C) (A C) (A B) (C) NIL) :ATTACKS ((A B) (A C) (A ZA) (B A)) :COUNT 607744)
    (:REMOVED ((A B C) (A B) (C) NIL) :ATTACKS ((A B) (A ZA) (B A)) :COUNT 161472)
    (:REMOVED ((B C) (A C) (A B) (C) (B) (A) NIL) :ATTACKS ((A ZA) (A ZB) (A ZC)) :COUNT 1404928)
    (:REMOVED ((A C) (A B) (A)) :ATTACKS ((A ZB) (A ZC)) :COUNT 7168)
    (:REMOVED ((A B C) (B C) (A B) (C) (B) (A) NIL) :ATTACKS ((A B) (A ZA) (A ZC) (ZC ZB)) :COUNT 18038784)
    (:REMOVED ((B C) (A B) (C) (B) (A) NIL) :ATTACKS ((A ZA) (A ZC)) :COUNT 36864)
    (:REMOVED ((A B C) (A B) (A)) :ATTACKS ((A B) (A ZC) (ZC ZB)) :COUNT 101120)
    (:REMOVED ((A B) (A)) :ATTACKS ((A ZC) (ZC ZB)) :COUNT 19456)
    (:REMOVED ((A B C) (B C) (A C) (C) (B) (A) NIL) :ATTACKS ((A C) (A ZA) (A ZB)) :COUNT 18038784)
    (:REMOVED ((B C) (A C) (C) (B) (A) NIL) :ATTACKS ((A ZA) (A ZB)) :COUNT 36864)
    (:REMOVED ((A B C) (A C) (A)) :ATTACKS ((A C) (A ZB)) :COUNT 101120)
    (:REMOVED ((A C) (A)) :ATTACKS ((A ZB)) :COUNT 19456)
    (:REMOVED ((A B C) (B C) (A C) (A B) (C) (B) NIL) :ATTACKS ((A B) (A C) (A ZA) (ZC ZA)) :COUNT 38426112)
    (:REMOVED ((A B C) (B C) (A C) (C) (B) NIL) :ATTACKS ((A C) (A ZA) (ZC ZA)) :COUNT 2798336)
    (:REMOVED ((A B C) (B C) (A B) (C) (B) NIL) :ATTACKS ((A B) (A ZA) (ZC ZA)) :COUNT 2798336)
    (:REMOVED ((B C) (C) (B) NIL) :ATTACKS ((A ZA) (ZC ZA)) :COUNT 49152)
    (:REMOVED ((A B C) (A C) (A B)) :ATTACKS ((A B) (A C) (ZC ZB)) :COUNT 3598080)
    (:REMOVED ((A B C) (A C)) :ATTACKS ((A C) (ZC ZB)) :COUNT 956928)
    (:REMOVED ((A B C) (A B)) :ATTACKS ((A B) (ZC ZB)) :COUNT 956928)
    (:REMOVED ((A B C) (A C) (A B) (A)) :ATTACKS ((A A) (ZC ZA)) :COUNT 14143488)))

(defparameter *ud3-simple-basefw-statistics*
  '((:REMOVED ((A B C) (B C) (A C) NIL) :ATTACKS ((A C) (B C) (C A) (C B) (C Z)) :COUNT 1)
    (:REMOVED ((A B C) (B C) (A C) (A) NIL) :ATTACKS ((B C) (C A) (C B) (C Z)) :COUNT 1)
    (:REMOVED ((A B C) (B C) (A C) (B) NIL) :ATTACKS ((A C) (C A) (C B) (C Z)) :COUNT 1)
    (:REMOVED ((A B C) (B C) (C) (A) NIL) :ATTACKS ((B C) (C B) (C Z)) :COUNT 1)
    (:REMOVED ((A B C) (A C) (C) (B) NIL) :ATTACKS ((A C) (C A) (C Z)) :COUNT 1)
    (:REMOVED ((A B C) (B C) (A B) (C) (B)) :ATTACKS ((B B) (B C) (C Z)) :COUNT 2)
    (:REMOVED ((A B C) (B C) (A B) (B) (A) NIL) :ATTACKS ((B A) (B B) (C Z)) :COUNT 4)
    (:REMOVED ((A B C) (B C) (A C) (A B) (B) (A) NIL) :ATTACKS ((A A) (B B) (C Z)) :COUNT 262)
    (:REMOVED ((A B C) (A C) (A B) (C) (A)) :ATTACKS ((A A) (A C) (C Z)) :COUNT 2)
    (:REMOVED ((A B C) (A C) (A B) (B) (A) NIL) :ATTACKS ((A A) (A B) (C Z)) :COUNT 4)
    (:REMOVED ((A B C) (B C) (A C) (C) (B)) :ATTACKS ((B Z) (C B) (C C)) :COUNT 2)
    (:REMOVED ((A B C) (B C) (A C) (C) (B) NIL) :ATTACKS ((A Z) (C B) (C C)) :COUNT 4)
    (:REMOVED ((A B C) (B C) (A C) (C) (A) NIL) :ATTACKS ((B Z) (C A) (C C)) :COUNT 4)
    (:REMOVED ((A B C) (B C) (A C) (C) (A)) :ATTACKS ((A Z) (C A) (C C)) :COUNT 2)
    (:REMOVED ((A B C) (B C) (A C) (A B) (C)) :ATTACKS ((A B) (C C)) :COUNT 151)
    (:REMOVED ((A B C) (B C) (A C) (C)) :ATTACKS ((C C)) :COUNT 45)
    (:REMOVED ((A B C) (B C) (A B) NIL) :ATTACKS ((A B) (B A) (B C) (B Z) (C B)) :COUNT 1)
    (:REMOVED ((A B C) (B C) (A B) (A) NIL) :ATTACKS ((B A) (B C) (B Z) (C B)) :COUNT 1)
    (:REMOVED ((A B C) (B C) (A C) (A B) (A) NIL) :ATTACKS ((A A) (B C) (B Z) (C B)) :COUNT 96)
    (:REMOVED ((A B C) (B C) (B) (A) NIL) :ATTACKS ((B C) (B Z) (C B)) :COUNT 1)
    (:REMOVED ((A B C) (B C) (C) (B) (A) NIL) :ATTACKS ((A Z) (B C) (C B)) :COUNT 5)
    (:REMOVED ((A B C) (B C) (A C) (A B) (C) (B) (A)) :ATTACKS ((A B) (A Z) (B C) (B Z) (C A)) :COUNT 520)
    (:REMOVED ((A B C) (B C) (A C) (A B) (C) (A)) :ATTACKS ((A A) (A B) (B C) (B Z) (C A)) :COUNT 450)
    (:REMOVED ((A B C) (B C) (A C) (A B) (C) (B)) :ATTACKS ((A B) (B C) (B Z) (C A)) :COUNT 450)
    (:REMOVED ((A B C) (A C) (C) (B) (A) NIL) :ATTACKS ((A C) (B Z) (C A)) :COUNT 5)
    (:REMOVED ((A B C) (B C) (A C) (A B) NIL) :ATTACKS ((A B) (A C) (A Z) (B A) (B C) (C A)) :COUNT 13)
    (:REMOVED ((A B C) (B C) (A C) (B) (A) NIL) :ATTACKS ((A Z) (B C) (C A)) :COUNT 22)
    (:REMOVED ((A B C) (B C) (A C) (A B) (B) NIL) :ATTACKS ((A C) (A Z) (B B) (C A)) :COUNT 96)
    (:REMOVED ((A B C) (A C) (A B) NIL) :ATTACKS ((A B) (A C) (A Z) (B A) (C A)) :COUNT 1)
    (:REMOVED ((A B C) (A C) (A B) (B) NIL) :ATTACKS ((A B) (A C) (A Z) (C A)) :COUNT 1)
    (:REMOVED ((A B C) (A C) (B) (A) NIL) :ATTACKS ((A C) (A Z) (C A)) :COUNT 1)
    (:REMOVED ((A B C) (B C) (A B) (C) NIL) :ATTACKS ((A B) (B A) (B C) (B Z)) :COUNT 1)
    (:REMOVED ((A B C) (B C) (A C) (A B) (C) (A) NIL) :ATTACKS ((A A) (B C) (B Z)) :COUNT 262)
    (:REMOVED ((A B C) (A B) (C) (B) (A) NIL) :ATTACKS ((A B) (A Z) (B A) (B Z)) :COUNT 5)
    (:REMOVED ((A B C) (A C) (A B) (C) (B) NIL) :ATTACKS ((A B) (A C) (B A) (B Z)) :COUNT 22)
    (:REMOVED ((A B C) (A B) (C) (B) NIL) :ATTACKS ((A B) (B A) (B Z)) :COUNT 1)
    (:REMOVED ((A B C) (A C) (A B) (C) (A) NIL) :ATTACKS ((A A) (A C) (B Z)) :COUNT 4)
    (:REMOVED ((A B C) (A C) (A B) (B) (A)) :ATTACKS ((A A) (A B) (B Z)) :COUNT 2)
    (:REMOVED ((A B C) (A C) (A B) (C) (B) (A) NIL) :ATTACKS ((A A) (B Z)) :COUNT 116)
    (:REMOVED ((A B C) (B C) (A B) (C) (B) NIL) :ATTACKS ((A Z) (B B) (B C)) :COUNT 4)
    (:REMOVED ((A B C) (B C) (A C) (A B) (C) NIL) :ATTACKS ((A B) (A C) (A Z) (B A) (B C)) :COUNT 96)
    (:REMOVED ((A B C) (B C) (A B) (C) (A) NIL) :ATTACKS ((A B) (A Z) (B A) (B C)) :COUNT 22)
    (:REMOVED ((A B C) (B C) (A C) (A B)) :ATTACKS ((A B) (A C) (B C)) :COUNT 27)
    (:REMOVED ((A B C) (B C) (A C)) :ATTACKS ((A C) (B C)) :COUNT 9)
    (:REMOVED ((A B C) (B C) (A B)) :ATTACKS ((A B) (B C)) :COUNT 9)
    (:REMOVED ((A B C) (B C) (A C) (A B) (A)) :ATTACKS ((A A) (B C)) :COUNT 151)
    (:REMOVED ((A B C) (B C)) :ATTACKS ((B C)) :COUNT 3)
    (:REMOVED ((A B C) (B C) (A B) (B) (A)) :ATTACKS ((A Z) (B A) (B B)) :COUNT 2)
    (:REMOVED ((A B C) (B C) (A C) (A B) (B)) :ATTACKS ((A C) (B B)) :COUNT 151)
    (:REMOVED ((A B C) (B C) (A C) (A B) (B) (A)) :ATTACKS ((A A) (B B)) :COUNT 450)
    (:REMOVED ((A B C) (B C) (A B) (B)) :ATTACKS ((B B)) :COUNT 45)
    (:REMOVED ((A B C) (A C) (A B) (C) NIL) :ATTACKS ((A B) (A C) (A Z) (B A)) :COUNT 1)
    (:REMOVED ((A B C) (A B) (C) (A) NIL) :ATTACKS ((A B) (A Z) (B A)) :COUNT 1)
    (:REMOVED ((A B C) (B C) (A C) (A B) (C) (B) NIL) :ATTACKS ((A B) (A C) (A Z)) :COUNT 262)
    (:REMOVED ((A B C) (B C) (A C) (C) (B) (A) NIL) :ATTACKS ((A C) (A Z)) :COUNT 116)
    (:REMOVED ((A B C) (B C) (A B) (C) (B) (A) NIL) :ATTACKS ((A B) (A Z)) :COUNT 116)
    (:REMOVED ((B C) (A C) (A B) (C) (B) (A) NIL) :ATTACKS ((A Z)) :COUNT 7)
    (:REMOVED ((A B C) (A C) (A B)) :ATTACKS ((A B) (A C)) :COUNT 9)
    (:REMOVED ((A B C) (A C)) :ATTACKS ((A C)) :COUNT 3) (:REMOVED ((A B C) (A B)) :ATTACKS ((A B)) :COUNT 3)
    (:REMOVED ((A B C) (A C) (A B) (A)) :ATTACKS ((A A)) :COUNT 45)))

(defun ud3-basefw-realizable (&key (result *ud3-basefw-statistics*))
  (let ((es (power-set '(a b c))))
    (mapcar (lambda (stat)
	      (destructuring-bind (&key removed &allow-other-keys) stat
		(set-difference es removed :test #'set-equal)))
	    result)))

;;;
;;; Constructions
;;;

(define-construction ud3-c1 (aa bb cc azb bza bzc czb azc cza axb bxc axc amb amc bmc a0 b0 c0)
  (let ((aaf (make-aaf () '((a za1) (za1 za2) (za2 a)
			    (b zb1) (zb1 zb2) (zb2 b)
			    (c zc1) (zc1 zc2) (zc2 c)))))
    (labels ((att (attacks) (setq aaf (augment-framework aaf () attacks)))
	     (merg (args target) (setq aaf (merge-args aaf args target)))
	     (remargs (args) (setq aaf (aaf-restriction aaf (set-difference (aaf-arguments aaf) args)))))
      (when aa (att '((za2 za2))))
      (when bb (att '((zb2 zb2))))
      (when cc (att '((zc2 zc2))))
      (when azb (att '((a zb2) (zb2 a))))
      (when bza (att '((b za2) (za2 b))))
      (when bzc (att '((b zc2) (zc2 b))))
      (when czb (att '((c zb2) (zb2 c))))
      (when azc (att '((a zc2) (zc2 a))))
      (when cza (att '((c za2) (za2 c))))
      (when axb (att '((a b) (b a) (za1 za1) (zb1 zb1) (zb2 zb2) (za2 za2))))
      (when bxc (att '((b c) (c b) (zc1 zc1) (zb1 zb1) (zc2 zc2) (zb2 zb2))))
      (when axc (att '((a c) (c a) (za1 za1) (zc1 zc1) (zc2 zc2) (za2 za2))))
      (when amb (merg '(za2 zb2 z) 'z))
      (when amc (merg '(za2 zc2 z) 'z))
      (when bmc (merg '(zb2 zc2 z) 'z))
      (when a0 (remargs '(za1 za2 z)))
      (when b0 (remargs '(zb1 zb2 z)))
      (when c0 (remargs '(zc1 zc2 z))))
    aaf))

(define-construction ud3-c2 (za zb zc azb azc bza bzc cza czb zabc)
  (let ((aaf (make-aaf '(a b c) ())))
    (labels ((att (attacks) (setq aaf (augment-framework aaf () attacks)))
	     #+nil(merg (args target) (setq aaf (merge-args aaf args target)))
	     #+nil(remargs (args) (setq aaf (aaf-restriction aaf (set-difference (aaf-arguments aaf) args)))))
      (macrolet ((imply (x y)
		   `(when ,x (setq ,y t))))
	(imply (or bza cza zabc) za)
	(imply (or azb czb zabc) zb)
	(imply (or azc bzc zabc) zc)
	(when za (att '((za za) (za a))))
	(when zb (att '((zb zb) (zb b))))
	(when zc (att '((zc zc) (zc c))))
	(when azb (att '((a zb))))
	(when azc (att '((a zc))))
	(when bza (att '((b za))))
	(when bzc (att '((b zc))))
	(when cza (att '((c za))))
	(when czb (att '((c zb))))
	(when zabc (att '((za b) (zb c) (zc a))))
	))
    aaf))

(defun ud3-c1-constructed ()
  '((NIL (B) (C) (A B C)) (NIL (A) (B) (A B) (C) (A C) (B C)) (NIL (A) (C) (A B C)) (NIL (A) (B) (A B C))
    (NIL (A) (A B) (B C)) (NIL (A B) (C) (B C)) (NIL (A) (A B) (A C)) (NIL (A B) (A C)) (NIL (B) (A B) (A C))
    (NIL (A B) (C) (A C)) (NIL (B) (C)) (NIL (A) (A B) (C)) (NIL (B) (A B) (C)) (NIL (A) (A C) (B C))
    (NIL (B) (A B) (B C)) (NIL (A B) (B C)) (NIL (B) (A B) (C) (B C)) (NIL (A B) (C)) (NIL (A) (C))
    (NIL (B) (A C) (B C)) (NIL (A) (A B) (C) (A C)) (NIL (A) (B) (C)) (NIL (A) (B) (A B) (C)) (NIL (A) (B) (B C))
    (NIL (A) (C) (B C)) ((A) (B) (C) (B C)) (NIL (A) (B) (C) (B C)) (NIL (A) (B) (A B) (B C))
    (NIL (A) (A B) (C) (B C)) (NIL (A) (B) (A B) (C) (B C)) (NIL (B) (C) (A C)) (NIL (A) (B) (A C))
    (NIL (A) (B) (C) (A C)) ((B) (A B) (B C)) (NIL (B) (A B) (C) (A C)) (NIL (A) (B) (A B) (A C))
    (NIL (A) (B) (A B) (C) (A C)) (NIL (A) (A C) (A B C)) (NIL (A) (A B) (A C) (A B C)) (NIL (A B) (A C) (A B C))
    (NIL (C) (A C) (B C)) (NIL (A C) (B C)) (NIL (B) (C) (A C) (B C)) (NIL (B) (A C)) (NIL (B) (A B) (A B C))
    (NIL (A) (B) (A C) (B C)) ((A) (B) (A B) (C)) (NIL (A) (B) (A B) (A C) (A B C)) (NIL (A) (C) (A C) (B C))
    (NIL (A) (B C)) (NIL (A) (A C)) ((A) (B) (C) (A C)) (NIL (A) (B) (C) (A C) (B C)) (NIL (A) (B))
    (NIL (A) (B) (A B) (A B C)) (NIL (B) (B C) (A B C)) ((A) (A B) (A C)) (NIL (C) (A C) (B C) (A B C))
    (NIL (A C) (B C) (A B C)) ((B) (A B) (C)) (NIL (C) (A C) (A B C)) ((A) (A B) (C)) (NIL (A C) (A B C))
    (NIL (B) (C) (B C) (A B C)) (NIL (B) (A B C)) (NIL (B) (C) (A C) (B C) (A B C)) (NIL (C) (A C))
    (NIL (B) (A C) (A B C)) (NIL (A C)) ((A) (C) (B C)) ((A) (B) (B C)) ((A) (A B) (B C)) ((A) (B) (C))
    ((A B) (C) (B C)) ((A) (A B) (C) (B C)) ((A) (C)) ((C) (A C) (B C)) (NIL (A) (A B) (A B C))
    (NIL (A B) (A B C)) (NIL (B) (A B) (B C) (A B C)) (NIL (A B) (B C) (A B C)) ((A) (B) (A C)) ((B) (C) (A C))
    (NIL (A) (B) (A B) (B C) (A B C)) (NIL (B) (B C)) ((B) (A B) (A C)) (NIL (A) (C) (A C) (A B C)) ((A B) (B C))
    (NIL (A) (A B C)) ((A B) (C) (A C)) ((A B) (C)) ((B) (A B) (C) (A C)) ((B) (A B) (A B C)) ((B) (C))
    (NIL (C) (B C) (A B C)) (NIL (C) (A B C)) (NIL (B C) (A B C)) (NIL (A B C)) (NIL (A) (C) (A C) (B C) (A B C))
    (NIL (C) (B C)) (NIL (A) (B C) (A B C)) (NIL (B C)) ((B) (A C) (B C)) ((B) (A C)) ((A) (A C) (B C))
    ((A) (B C)) ((A) (B) (A C) (B C)) ((A) (B)) ((B) (B C) (A B C)) ((B) (A B C)) ((A B) (A C))
    (NIL (A) (A B) (C) (A C) (A B C)) (NIL (A) (A B)) ((A) (A B) (A B C)) (NIL (B) (A B) (C) (B C) (A B C))
    (NIL (A B) (C) (A B C)) ((A C) (B C)) (NIL (B) (A B)) (NIL (A B)) ((A) (A C) (A B C)) ((A) (A B C))
    (NIL (A) (B) (A B) (C) (A C) (B C) (A B C)) (NIL (B) (C) (B C)) (NIL (A) (C) (A C)) (NIL (C))
    (NIL (A) (B) (A B)) ((C) (A C) (A B C)) (NIL (B)) (NIL (A)) ((C) (B C) (A B C)) ((A) (A B) (A C) (A B C))
    ((C) (A B C)) ((A) (A C)) ((C) (A C) (B C) (A B C)) ((B) (A B) (B C) (A B C)) ((B) (B C)) (NIL) ((C) (B C))
    ((A) (A B)) ((B) (A B)) ((C) (A C)) ((A)) ((B)) ((C)) ((B C) (A B C)) ((A C) (A B C)) ((A B) (A B C)) ((B C))
    ((A C)) ((A B)) ((A B C))))

(defun ud3-c1-expressivity ()
  '(((NIL (B) (C) (A B C)) (:AA :AZB :BMC)) ((NIL (A) (B) (A B) (C) (A C) (B C)) (:AMB :AMC))
    ((NIL (A) (C) (A B C)) (:BB :BZA :AMC)) ((NIL (A) (B) (A B C)) (:CC :CZB :AMB))
    ((NIL (A) (B) (C)) (:AXB :BXC :AXC)) ((NIL (A) (A B) (C)) (:BZA :BXC :AXC))
    ((NIL (B) (A B) (C)) (:AZB :BXC :AXC)) ((NIL (A) (B) (A B) (C)) (:BXC :AXC))
    ((NIL (A) (B) (B C)) (:CZB :AXB :AXC)) ((NIL (A) (C) (B C)) (:BZC :AXB :AXC))
    ((NIL (A) (B) (C) (B C)) (:AXB :AXC)) ((NIL (A) (A B) (B C)) (:BB :BZA :CZB :AXC))
    ((NIL (B) (A B) (B C)) (:BB :AZB :CZB :AXC)) ((NIL (A B) (B C)) (:AZB :CZB :AXC))
    ((NIL (A) (B) (A B) (B C)) (:BB :CZB :AXC)) ((NIL (A B) (C) (B C)) (:BB :AZB :BZC :AXC))
    ((NIL (A) (A B) (C) (B C)) (:BB :BZA :AXC)) ((NIL (B) (A B) (C) (B C)) (:BB :AZB :AXC))
    ((NIL (A) (B) (A B) (C) (B C)) (:BB :AXC)) ((NIL (A) (C)) (:AXC)) ((NIL (A) (B) (A C)) (:CZA :AXB :BXC))
    ((NIL (B) (C) (A C)) (:AZC :AXB :BXC)) ((NIL (A) (B) (C) (A C)) (:AXB :BXC))
    ((NIL (A) (A B) (A C)) (:AA :BZA :CZA :BXC)) ((NIL (A B) (A C)) (:BZA :CZA :BXC))
    ((NIL (B) (A B) (A C)) (:AA :AZB :CZA :BXC)) ((NIL (A) (B) (A B) (A C)) (:AA :CZA :BXC))
    ((NIL (A B) (C) (A C)) (:AA :BZA :AZC :BXC)) ((NIL (A) (A B) (C) (A C)) (:AA :BZA :BXC))
    ((NIL (A B) (C)) (:BZA :BXC)) ((NIL (B) (A B) (C) (A C)) (:AA :AZB :BXC))
    ((NIL (A) (B) (A B) (C) (A C)) (:AA :BXC)) ((NIL (B) (C)) (:BXC)) ((NIL (A) (A C) (B C)) (:CC :BZC :CZA :AXB))
    ((NIL (B) (A C) (B C)) (:CC :CZB :AZC :AXB)) ((NIL (C) (A C) (B C)) (:CC :BZC :AZC :AXB))
    ((NIL (A C) (B C)) (:BZC :AZC :AXB)) ((NIL (B) (C) (A C) (B C)) (:CC :AZC :AXB)) ((NIL (B) (A C)) (:AZC :AXB))
    ((NIL (A) (B) (A C) (B C)) (:CC :CZB :AXB)) ((NIL (A) (C) (A C) (B C)) (:CC :BZC :AXB))
    ((NIL (A) (B C)) (:BZC :AXB)) ((NIL (A) (B) (C) (A C) (B C)) (:CC :AXB)) ((NIL (A) (B)) (:AXB))
    (((A) (B) (A B) (C)) (:BXC :AXC :C0)) (((A) (B) (C) (B C)) (:AXB :AXC :A0)) (((B) (A B) (B C)) (:AXC :B0))
    ((NIL (A) (B) (A B) (A B C)) (:AA :BB :CC :CZB :CZA)) ((NIL (A) (A C) (A B C)) (:AA :BB :CC :BZC :CZA))
    ((NIL (A) (A B) (A C) (A B C)) (:AA :BB :CC :BZA :CZA)) ((NIL (A B) (A C) (A B C)) (:BB :CC :BZA :CZA))
    (((A) (B) (C) (A C)) (:AXB :BXC :B0)) ((NIL (B) (A B) (A B C)) (:AA :BB :CC :AZB :CZA))
    ((NIL (A) (B) (A B) (A C) (A B C)) (:AA :BB :CC :CZA)) ((NIL (A) (A C)) (:AA :CC :CZA))
    (((A) (A B) (A C)) (:BXC :A0)) ((NIL (B) (B C) (A B C)) (:AA :BB :CC :CZB :AZC))
    ((NIL (C) (A C) (B C) (A B C)) (:AA :BB :CC :BZC :AZC)) ((NIL (A C) (B C) (A B C)) (:AA :BB :BZC :AZC))
    (((B) (A B) (C)) (:BXC :AXC :B0 :C0)) (((A) (A B) (C)) (:BXC :AXC :A0 :C0))
    ((NIL (C) (A C) (A B C)) (:AA :BB :CC :BZA :AZC)) ((NIL (A C) (A B C)) (:AA :BB :BZA :AZC))
    ((NIL (B) (C) (B C) (A B C)) (:AA :BB :CC :AZB :AZC)) ((NIL (B) (A B C)) (:AA :BB :AZB :AZC))
    ((NIL (B) (C) (A C) (B C) (A B C)) (:AA :BB :CC :AZC)) ((NIL (C) (A C)) (:AA :CC :AZC))
    ((NIL (B) (A C) (A B C)) (:AA :BB :AZC)) ((NIL (A C)) (:AA :AZC)) (((A) (C) (B C)) (:AXB :AXC :A0 :C0))
    (((A) (B) (B C)) (:AXB :AXC :A0 :B0)) (((A) (A B) (B C)) (:BB :CZB :AXC :A0 :C0))
    (((A B) (C) (B C)) (:BB :AZB :AXC :A0 :C0)) (((A) (A B) (C) (B C)) (:BB :AXC :A0 :C0))
    (((A) (C)) (:AXC :A0 :C0)) (((A) (B) (C)) (:AXB :BXC :AXC :A0 :B0 :C0)) (((C) (A C) (B C)) (:AXB :C0))
    ((NIL (A) (A B) (A B C)) (:AA :BB :CC :BZA :CZB)) ((NIL (A B) (A B C)) (:BB :CC :BZA :CZB))
    ((NIL (B) (A B) (B C) (A B C)) (:AA :BB :CC :AZB :CZB)) ((NIL (A B) (B C) (A B C)) (:AA :CC :AZB :CZB))
    (((A) (B) (A C)) (:AXB :BXC :A0 :B0)) (((B) (C) (A C)) (:AXB :BXC :B0 :C0))
    ((NIL (A) (B) (A B) (B C) (A B C)) (:AA :BB :CC :CZB)) ((NIL (B) (B C)) (:BB :CC :CZB))
    (((B) (A B) (A C)) (:AA :CZA :BXC :B0 :C0)) ((NIL (A) (C) (A C) (A B C)) (:AA :BB :CC :BZA :BZC))
    ((NIL (A) (A B C)) (:AA :BB :BZA :BZC)) (((A B) (C) (A C)) (:AA :BZA :BXC :B0 :C0))
    (((A B) (C)) (:BZA :BXC :B0 :C0)) (((B) (A B) (C) (A C)) (:AA :BXC :B0 :C0)) (((B) (C)) (:BXC :B0 :C0))
    ((NIL (C) (B C) (A B C)) (:AA :BB :CC :AZB :BZC)) (((A B) (B C)) (:AXC :A0 :B0 :C0))
    (((B) (A B) (A B C)) (:AA :CC :CZA :B0)) ((NIL (C) (A B C)) (:AA :CC :AZB :BZC))
    ((NIL (B C) (A B C)) (:AA :BB :AZB :BZC)) ((NIL (A B C)) (:AA :AZB :BZC))
    ((NIL (A) (C) (A C) (B C) (A B C)) (:AA :BB :CC :BZC)) ((NIL (C) (B C)) (:BB :CC :BZC))
    ((NIL (A) (B C) (A B C)) (:AA :BB :BZC)) ((NIL (B C)) (:BB :BZC)) (((B) (A C) (B C)) (:CC :AZC :AXB :A0 :B0))
    (((B) (A C)) (:AZC :AXB :A0 :B0)) (((A) (A C) (B C)) (:CC :BZC :AXB :A0 :B0))
    (((A) (B C)) (:BZC :AXB :A0 :B0)) (((A) (B) (A C) (B C)) (:CC :AXB :A0 :B0))
    (((B) (B C) (A B C)) (:AA :CC :AZC :B0)) (((A) (B)) (:AXB :A0 :B0))
    ((NIL (A) (A B) (C) (A C) (A B C)) (:AA :BB :CC :BZA)) (((B) (A B C)) (:AA :AZC :B0))
    (((A B) (A C)) (:BXC :A0 :B0 :C0)) ((NIL (A) (A B)) (:AA :BB :BZA))
    ((NIL (B) (A B) (C) (B C) (A B C)) (:AA :BB :CC :AZB)) (((A) (A B) (A B C)) (:BB :CC :CZB :A0))
    ((NIL (A B) (C) (A B C)) (:AA :CC :AZB)) ((NIL (B) (A B)) (:AA :BB :AZB)) ((NIL (A B)) (:AA :AZB))
    (((A C) (B C)) (:AXB :A0 :B0 :C0)) (((A) (A C) (A B C)) (:BB :CC :BZC :A0)) (((A) (A B C)) (:BB :BZC :A0))
    ((NIL (A) (B) (A B) (C) (A C) (B C) (A B C)) (:AA :BB :CC)) ((NIL (B) (C) (B C)) (:BB :CC))
    ((NIL (A) (C) (A C)) (:AA :CC)) ((NIL (C)) (:CC)) ((NIL (A) (B) (A B)) (:AA :BB))
    (((C) (A C) (A B C)) (:AA :BB :BZA :C0)) ((NIL (B)) (:BB)) (((C) (B C) (A B C)) (:AA :BB :AZB :C0))
    (((A) (A B) (A C) (A B C)) (:BB :CC :A0)) ((NIL (A)) (:AA)) (((C) (A B C)) (:AA :AZB :C0))
    (((A) (A C)) (:CC :A0)) (((C) (A C) (B C) (A B C)) (:AA :BB :CC :C0)) (((C) (B C)) (:BB :CC :C0))
    (((A) (A B)) (:BB :A0)) (((B) (A B) (B C) (A B C)) (:AA :CC :B0)) (((C) (A C)) (:AA :CC :C0))
    (((B C) (A B C)) (:AA :BB :CC :B0 :C0)) (((A C) (A B C)) (:BB :CC :A0 :C0)) (((B C)) (:BB :CC :B0 :C0))
    ((NIL) NIL) (((A B C)) (:AA :BB :CC :A0 :B0 :C0)) (((A C)) (:AA :CC :A0 :C0)) (((A)) (:AA :A0))
    (((B) (B C)) (:CC :B0)) (((C)) (:CC :C0)) (((B) (A B)) (:AA :BB :B0)) (((B)) (:BB :B0))
    (((A B) (A B C)) (:CC :A0 :B0)) (((A B)) (:AA :BB :A0 :B0))))

(defun ud3-c2-constructed ()
  '((NIL (A) (B) (C) (A C) (B C) (A B C)) (NIL (A) (B) (A B) (A B C)) (NIL (B) (A B) (A B C)) ((B) (A B) (A B C))
    (NIL (A) (B) (A B) (C) (A C) (A B C)) (NIL (A) (A B) (A C) (A B C)) (NIL (B) (B C) (A B C))
    (NIL (B) (A B) (B C) (A B C)) (NIL (A) (C) (A C) (A B C)) (NIL (A) (B) (A B) (B C) (A B C))
    ((A) (A B) (A B C)) (NIL (C) (B C) (A B C)) (NIL (A) (B) (A B) (A C) (A B C)) ((A) (A C) (A B C))
    (NIL (A) (B) (A B) (C) (B C) (A B C)) (NIL (C) (A C) (B C) (A B C)) (NIL (C) (A C) (A B C))
    (NIL (A) (A C) (A B C)) ((C) (A C) (A B C)) (NIL (B) (C) (B C) (A B C)) (NIL (A) (A B) (C) (A C) (A B C))
    (NIL (A) (C) (A C) (B C) (A B C)) (NIL (B) (C) (A C) (B C) (A B C)) ((B) (B C) (A B C))
    (NIL (A) (A B) (A B C)) (NIL (B) (A B) (C) (B C) (A B C)) ((C) (B C) (A B C))
    (NIL (A) (B) (A B) (C) (A C) (B C) (A B C)) ((A) (A B) (A C) (A B C)) ((B) (A B) (B C) (A B C))
    ((A B) (A B C)) ((C) (A C) (B C) (A B C)) ((A C) (A B C)) ((B C) (A B C)) ((A B C))))

(defun ud3-all-constructed ()
  (union (ud3-c1-constructed) (ud3-c2-constructed) :test #'es-equal))

;;;
;;;  Loop Base FW
;;;

(defvar *loop-base-statistics*
  '(((NIL (A) (B) (A B) (C) (A B C))
     (MAKE-AAF '(A B C X Z0 Z1 Z2 Z3)
      '((Z3 Z3) (Z3 B) (Z2 A) (Z1 Z2) (Z1 X) (Z1 C) (Z0 X) (X C) (X A) (C Z1) (A Z0) (X Z0) (X X) (Z3 Z0)
        (C Z3) (Z0 C) (Z2 Z0) (B Z2) (Z0 B) (Z1 Z0) (A Z1) (Z0 A))))
    ((NIL (A) (A C) (B C) (A B C))
     (MAKE-AAF '(A B C X Z0 Z1 Z2 Z3)
      '((Z3 Z1) (Z3 C) (Z3 B) (Z2 Z3) (Z1 Z2) (Z1 C) (Z1 B) (Z1 A) (Z0 Z0) (B Z1) (X Z0) (X X) (Z3 Z0)
        (C Z3) (Z0 C) (Z2 Z0) (B Z2) (Z0 B) (Z1 Z0) (A Z1) (Z0 A))))
    (((B) (A B C))
     (MAKE-AAF '(A B C X Z0 Z1 Z2 Z3)
      '((Z3 C) (Z3 A) (Z1 Z3) (X C) (B Z0) (X Z0) (X X) (Z3 Z0) (C Z3) (Z0 C) (Z2 Z0) (B Z2) (Z0 B)
        (Z1 Z0) (A Z1) (Z0 A))))
    ((NIL (A) (A B) (A C) (B C) (A B C))
     (MAKE-AAF '(A B C X Z0 Z1 Z2 Z3)
      '((Z3 C) (Z3 B) (Z3 A) (Z2 C) (Z2 B) (Z2 A) (Z1 Z3) (Z1 Z2) (C Z1) (B Z1) (A Z3) (A Z2) (X Z0)
        (X X) (Z3 Z0) (C Z3) (Z0 C) (Z2 Z0) (B Z2) (Z0 B) (Z1 Z0) (A Z1) (Z0 A))))
    ((NIL (A C) (A B C))
     (MAKE-AAF '(A B C X Z0 Z1 Z2 Z3)
      '((Z3 B) (Z3 A) (Z2 X) (Z1 X) (Z0 Z3) (Z0 X) (X C) (X B) (C Z0) (B Z1) (A Z2) (X Z0) (X X) (Z3 Z0)
        (C Z3) (Z0 C) (Z2 Z0) (B Z2) (Z0 B) (Z1 Z0) (A Z1) (Z0 A))))
    ((NIL (A B C))
     (MAKE-AAF '(A B C X Z0 Z1 Z2 Z3)
      '((Z3 Z1) (Z2 Z2) (Z1 C) (Z1 B) (Z1 A) (X A) (B Z3) (A Z0) (X Z0) (X X) (Z3 Z0) (C Z3) (Z0 C)
        (Z2 Z0) (B Z2) (Z0 B) (Z1 Z0) (A Z1) (Z0 A))))
    ((NIL (A B) (B C) (A B C))
     (MAKE-AAF '(A B C X Z0 Z1 Z2 Z3)
      '((Z0 X) (X C) (X A) (C Z0) (B Z3) (B Z1) (A Z0) (X Z0) (X X) (Z3 Z0) (C Z3) (Z0 C) (Z2 Z0) (B Z2)
        (Z0 B) (Z1 Z0) (A Z1) (Z0 A))))
    ((NIL (A B) (C) (A B C))
     (MAKE-AAF '(A B C X Z0 Z1 Z2 Z3)
      '((Z0 X) (X C) (X A) (B Z3) (B Z1) (A Z0) (X Z0) (X X) (Z3 Z0) (C Z3) (Z0 C) (Z2 Z0) (B Z2) (Z0 B)
        (Z1 Z0) (A Z1) (Z0 A))))
    ((NIL (A) (B) (A B) (A C) (B C) (A B C))
     (MAKE-AAF '(A B C X Z0 Z1 Z2 Z3)
      '((Z3 Z1) (Z1 C) (Z1 B) (Z1 A) (B Z1) (X Z0) (X X) (Z3 Z0) (C Z3) (Z0 C) (Z2 Z0) (B Z2) (Z0 B)
        (Z1 Z0) (A Z1) (Z0 A))))
    ((NIL (A) (B) (B C) (A B C))
     (MAKE-AAF '(A B C X Z0 Z1 Z2 Z3)
      '((Z1 Z1) (Z0 X) (X C) (X A) (C Z0) (B Z3) (X Z0) (X X) (Z3 Z0) (C Z3) (Z0 C) (Z2 Z0) (B Z2) (Z0 B)
        (Z1 Z0) (A Z1) (Z0 A))))
    ((NIL (A) (B) (C) (A C) (B C) (A B C))
     (MAKE-AAF '(A B C X Z0 Z1 Z2 Z3)
      '((Z3 X) (Z2 C) (Z1 Z1) (X B) (X A) (A Z0) (X Z0) (X X) (Z3 Z0) (C Z3) (Z0 C) (Z2 Z0) (B Z2) (Z0 B)
        (Z1 Z0) (A Z1) (Z0 A))))
    ((NIL (B) (A B C))
     (MAKE-AAF '(A B C X Z0 Z1 Z2 Z3)
      '((Z0 X) (X C) (C Z0) (A Z3) (A Z2) (X Z0) (X X) (Z3 Z0) (C Z3) (Z0 C) (Z2 Z0) (B Z2) (Z0 B)
        (Z1 Z0) (A Z1) (Z0 A))))
    ((NIL (B) (C) (A B C))
     (MAKE-AAF '(A B C X Z0 Z1 Z2 Z3)
      '((Z1 Z1) (Z0 Z1) (Z0 X) (X A) (A Z0) (X Z0) (X X) (Z3 Z0) (C Z3) (Z0 C) (Z2 Z0) (B Z2) (Z0 B)
        (Z1 Z0) (A Z1) (Z0 A))))
    ((NIL (C) (A C) (B C))
     (MAKE-AAF '(A B C X Z0 Z1 Z2 Z3)
      '((X A) (C Z2) (C Z1) (B Z0) (A Z0) (A B) (X Z0) (X X) (Z3 Z0) (C Z3) (Z0 C) (Z2 Z0) (B Z2) (Z0 B)
        (Z1 Z0) (A Z1) (Z0 A))))
    ((NIL (A C) (B C))
     (MAKE-AAF '(A B C X Z0 Z1 Z2 Z3)
      '((Z3 C) (Z3 B) (Z0 X) (X C) (C Z0) (B Z1) (B A) (A Z3) (A Z2) (A B) (X Z0) (X X) (Z3 Z0) (C Z3)
        (Z0 C) (Z2 Z0) (B Z2) (Z0 B) (Z1 Z0) (A Z1) (Z0 A))))
    ((NIL (C) (A C) (B C) (A B C))
     (MAKE-AAF '(A B C X Z0 Z1 Z2 Z3)
      '((X B) (X A) (C Z2) (C Z1) (B Z0) (A Z0) (X Z0) (X X) (Z3 Z0) (C Z3) (Z0 C) (Z2 Z0) (B Z2) (Z0 B)
        (Z1 Z0) (A Z1) (Z0 A))))
    ((NIL (B) (C) (A C) (B C) (A B C))
     (MAKE-AAF '(A B C X Z0 Z1 Z2 Z3)
      '((X B) (X A) (C Z2) (C Z1) (A Z0) (X Z0) (X X) (Z3 Z0) (C Z3) (Z0 C) (Z2 Z0) (B Z2) (Z0 B) (Z1 Z0)
        (A Z1) (Z0 A))))
    ((NIL (A) (B) (A B) (C) (A C) (B C))
     (MAKE-AAF '(A B C X Z0 Z1 Z2 Z3)
      '((A X) (X Z0) (X X) (Z3 Z0) (C Z3) (Z0 C) (Z2 Z0) (B Z2) (Z0 B) (Z1 Z0) (A Z1) (Z0 A))))
    ((NIL (C) (A C) (A B C))
     (MAKE-AAF '(A B C X Z0 Z1 Z2 Z3)
      '((Z2 Z2) (Z2 A) (Z1 Z1) (X B) (A Z0) (X Z0) (X X) (Z3 Z0) (C Z3) (Z0 C) (Z2 Z0) (B Z2) (Z0 B)
        (Z1 Z0) (A Z1) (Z0 A))))
    (((A) (A B) (A C) (A B C))
     (MAKE-AAF '(A B C X Z0 Z1 Z2 Z3)
      '((Z3 Z3) (Z2 Z2) (X C) (X B) (A Z0) (X Z0) (X X) (Z3 Z0) (C Z3) (Z0 C) (Z2 Z0) (B Z2) (Z0 B)
        (Z1 Z0) (A Z1) (Z0 A))))
    (((A) (A B) (A B C))
     (MAKE-AAF '(A B C X Z0 Z1 Z2 Z3)
      '((Z3 B) (Z2 X) (X C) (A Z0) (X Z0) (X X) (Z3 Z0) (C Z3) (Z0 C) (Z2 Z0) (B Z2) (Z0 B) (Z1 Z0)
        (A Z1) (Z0 A))))
    ((NIL (B) (A B) (C) (A C))
     (MAKE-AAF '(A B C X Z0 Z1 Z2 Z3)
      '((Z3 Z3) (Z3 A) (Z2 Z2) (Z2 A) (Z1 C) (C B) (B Z1) (B C) (A Z0) (X Z0) (X X) (Z3 Z0) (C Z3) (Z0 C)
        (Z2 Z0) (B Z2) (Z0 B) (Z1 Z0) (A Z1) (Z0 A))))
    (((C) (A C) (B C))
     (MAKE-AAF '(A B C X Z0 Z1 Z2 Z3)
      '((Z2 X) (X A) (C Z1) (C Z0) (A Z2) (A B) (X Z0) (X X) (Z3 Z0) (C Z3) (Z0 C) (Z2 Z0) (B Z2) (Z0 B)
        (Z1 Z0) (A Z1) (Z0 A))))
    (((B C) (A B C))
     (MAKE-AAF '(A B C X Z0 Z1 Z2 Z3)
      '((X A) (C Z1) (B Z0) (X Z0) (X X) (Z3 Z0) (C Z3) (Z0 C) (Z2 Z0) (B Z2) (Z0 B) (Z1 Z0) (A Z1)
        (Z0 A))))
    (((A) (B) (C))
     (MAKE-AAF '(A B C X Z0 Z1 Z2 Z3)
      '((C Z2) (C Z1) (C Z0) (C B) (C A) (B C) (A Z3) (A Z2) (A C) (A B) (X Z0) (X X) (Z3 Z0) (C Z3)
        (Z0 C) (Z2 Z0) (B Z2) (Z0 B) (Z1 Z0) (A Z1) (Z0 A))))
    (((A) (A B) (C) (B C))
     (MAKE-AAF '(A B C X Z0 Z1 Z2 Z3)
      '((Z2 Z2) (X B) (C Z1) (C A) (A Z3) (A Z0) (A C) (X Z0) (X X) (Z3 Z0) (C Z3) (Z0 C) (Z2 Z0) (B Z2)
        (Z0 B) (Z1 Z0) (A Z1) (Z0 A))))
    ((NIL (A) (B) (A B) (B C))
     (MAKE-AAF '(A B C X Z0 Z1 Z2 Z3)
      '((Z3 Z3) (Z1 C) (X C) (C Z1) (C Z0) (C A) (X Z0) (X X) (Z3 Z0) (C Z3) (Z0 C) (Z2 Z0) (B Z2) (Z0 B)
        (Z1 Z0) (A Z1) (Z0 A))))
    ((NIL (A) (B C))
     (MAKE-AAF '(A B C X Z0 Z1 Z2 Z3)
      '((Z3 C) (Z3 B) (Z1 Z1) (Z1 C) (C Z0) (B A) (A Z3) (A Z2) (A C) (A B) (X Z0) (X X) (Z3 Z0) (C Z3)
        (Z0 C) (Z2 Z0) (B Z2) (Z0 B) (Z1 Z0) (A Z1) (Z0 A))))
    (((A) (B) (C) (B C))
     (MAKE-AAF '(A B C X Z0 Z1 Z2 Z3)
      '((C A) (B Z1) (B A) (A Z3) (A Z2) (A Z0) (A C) (A B) (X Z0) (X X) (Z3 Z0) (C Z3) (Z0 C) (Z2 Z0)
        (B Z2) (Z0 B) (Z1 Z0) (A Z1) (Z0 A))))
    ((NIL (A B) (C) (A C))
     (MAKE-AAF '(A B C X Z0 Z1 Z2 Z3)
      '((Z3 Z3) (Z3 B) (Z2 Z2) (Z2 A) (C Z1) (C B) (B C) (A Z0) (X Z0) (X X) (Z3 Z0) (C Z3) (Z0 C)
        (Z2 Z0) (B Z2) (Z0 B) (Z1 Z0) (A Z1) (Z0 A))))
    ((NIL (B) (C) (B C) (A B C))
     (MAKE-AAF '(A B C X Z0 Z1 Z2 Z3)
      '((Z1 X) (X A) (A Z0) (X Z0) (X X) (Z3 Z0) (C Z3) (Z0 C) (Z2 Z0) (B Z2) (Z0 B) (Z1 Z0) (A Z1)
        (Z0 A))))
    ((NIL (A) (B) (B C))
     (MAKE-AAF '(A B C X Z0 Z1 Z2 Z3)
      '((Z3 A) (Z1 Z1) (X Z3) (B A) (A Z2) (A Z0) (A C) (A B) (X Z0) (X X) (Z3 Z0) (C Z3) (Z0 C) (Z2 Z0)
        (B Z2) (Z0 B) (Z1 Z0) (A Z1) (Z0 A))))
    (((A B) (A C))
     (MAKE-AAF '(A B C X Z0 Z1 Z2 Z3)
      '((C B) (B C) (A Z3) (A Z2) (A Z0) (X Z0) (X X) (Z3 Z0) (C Z3) (Z0 C) (Z2 Z0) (B Z2) (Z0 B) (Z1 Z0)
        (A Z1) (Z0 A))))
    ((NIL (A) (B) (C))
     (MAKE-AAF '(A B C X Z0 Z1 Z2 Z3)
      '((Z2 Z2) (C Z1) (C B) (C A) (A B) (X Z0) (X X) (Z3 Z0) (C Z3) (Z0 C) (Z2 Z0) (B Z2) (Z0 B) (Z1 Z0)
        (A Z1) (Z0 A))))
    (((A B C))
     (MAKE-AAF '(A B C X Z0 Z1 Z2 Z3)
      '((C Z0) (X Z0) (X X) (Z3 Z0) (C Z3) (Z0 C) (Z2 Z0) (B Z2) (Z0 B) (Z1 Z0) (A Z1) (Z0 A))))
    (((B) (A C))
     (MAKE-AAF '(A B C X Z0 Z1 Z2 Z3)
      '((C Z0) (C B) (B X) (B C) (A Z3) (A Z2) (X Z0) (X X) (Z3 Z0) (C Z3) (Z0 C) (Z2 Z0) (B Z2) (Z0 B)
        (Z1 Z0) (A Z1) (Z0 A))))
    (((A) (B) (B C))
     (MAKE-AAF '(A B C X Z0 Z1 Z2 Z3)
      '((Z2 Z2) (Z1 Z1) (B A) (A Z3) (A Z0) (A C) (A B) (X Z0) (X X) (Z3 Z0) (C Z3) (Z0 C) (Z2 Z0) (B Z2)
        (Z0 B) (Z1 Z0) (A Z1) (Z0 A))))
    (((B) (A C) (B C))
     (MAKE-AAF '(A B C X Z0 Z1 Z2 Z3)
      '((B Z1) (B A) (A Z2) (A Z0) (A B) (X Z0) (X X) (Z3 Z0) (C Z3) (Z0 C) (Z2 Z0) (B Z2) (Z0 B) (Z1 Z0)
        (A Z1) (Z0 A))))
    ((NIL (A) (B) (C) (B C))
     (MAKE-AAF '(A B C X Z0 Z1 Z2 Z3)
      '((A Z2) (A X) (A B) (X Z0) (X X) (Z3 Z0) (C Z3) (Z0 C) (Z2 Z0) (B Z2) (Z0 B) (Z1 Z0) (A Z1)
        (Z0 A))))
    ((NIL (A) (B) (C) (A C) (B C))
     (MAKE-AAF '(A B C X Z0 Z1 Z2 Z3)
      '((A Z2) (A B) (X Z0) (X X) (Z3 Z0) (C Z3) (Z0 C) (Z2 Z0) (B Z2) (Z0 B) (Z1 Z0) (A Z1) (Z0 A))))))

(defun ud3-loop-realized-types ()
  (mapcar #'first *loop-base-statistics*))

(defun find-loop-basefw-attacks (&key (num-threads 8))
  (loop 
    (format t " ** Total: ~s / ~s~%" (length *loop-base-statistics*)
	    (length (ud3-all-interesting-potentially-realizable-types)))
    (let ((result (run-test (make-instance 'find-any-filtering-framework
					   :aaf (construct-ud-loop-base-framework '(a b c))
					   :other-than (mapcar #'first *loop-base-statistics*)
					   :args '(a b c) :semantics #'undisputed-extensions
					   :max-additional-args 0 :num-repeats 1000000
					   :num-threads num-threads))))
      (when result
	(let* ((aaf (result-aaf result))
	       (es (undisputed-extensions aaf)))
	  (unless (find es *loop-base-statistics* :key #'first :test #'isomorphic-extensions)
	    (format t " ** FOUND: ~s~%" es)
	    (push (list es (aaf-form aaf)) *loop-base-statistics*)))))))

;;;
;;;  Case Studies
;;;

(defun case-study-1 ()
  (run-rc (make-instance 'find-filter-attacks
			 :basefw (make-ud-basefw '(a b c) :constructor #'construct-ud-simple-base-framework))))

(defun case-study-2 ()
  (run-rc (make-instance 'find-filter-attacks
			 :basefw (make-ud-basefw '(a b c) :constructor #'construct-ud-base-framework)
			 :num-threads 8)))

(defun case-study-4-hypothetical ()
  (run-rc (make-instance 'find-filter-attacks
			 :basefw
			 (make-basefw 'undisputed-extensions 'construct-loop-af '(a b c))
			 :num-threads 8)))

(defun case-study-1-interesting-realizable ()
  (remove-if-not #'three-arg-p (ud3-basefw-realizable :result *ud3-simple-basefw-statistics*)))

(defun case-study-2-interesting-realizable ()
  (remove-if-not #'three-arg-p (ud3-basefw-realizable :result *ud3-basefw-statistics*)))

(defun case-study-3-interesting-realizable ()
  (remove-if-not #'three-arg-p (ud3-all-constructed)))
  
(defun case-study-1-interesting-realizable-types ()
  (remove-duplicates (case-study-1-interesting-realizable) :test #'isomorphic-extensions))

(defun case-study-2-interesting-realizable-types ()
  (remove-duplicates (case-study-2-interesting-realizable) :test #'isomorphic-extensions))

(defun case-study-3-interesting-realizable-types ()
  (remove-duplicates (remove-if-not #'three-arg-p (ud3-c1-constructed)) :test #'isomorphic-extensions))

(defun case-study-4-interesting-realizable-types ()
  (ud3-loop-realized-types))

(defun ud3-all-interesting-realized-in-cs-123 ()
  (reduce (lambda (es1 es2) (union es1 es2 :test #'es-equal))
	  (list (case-study-1-interesting-realizable)
		(case-study-2-interesting-realizable)
		(case-study-3-interesting-realizable))))

(defun ud3-all-interesting-realized-in-cs ()
  (reduce (lambda (es1 es2) (union es1 es2 :test #'es-equal))
	  (list (case-study-1-interesting-realizable)
		(case-study-2-interesting-realizable)
		(case-study-3-interesting-realizable)
		(case-study-4-interesting-realizable-types))))

(defun isomorphism-classes (ess)
  (sort (remove-duplicates ess :test #'isomorphic-extensions) #'< :key #'length))

;;;
;;;  Witnesses
;;;

(defvar *ud3-witnesses*
  '(((NIL (A) (B) (C) (A B C))
     (MAKE-AAF '(A B C Z1 Z2 Z3 Z4 Z5)
      '((Z5 Z3) (Z5 B) (Z5 Z2) (A Z5) (A Z3) (Z4 Z5) (Z4 Z3) (Z4 Z2) (Z3 A) (Z3 B) (B Z4) (Z2 B) (Z2 C)
        (Z1 A) (Z1 Z1) (Z1 C) (C Z5) (C Z2))))
    ((NIL (A) (B) (A B) (A C) (B C))
     (MAKE-AAF '(A B C Z1 Z2 Z3 Z4)
      '((Z4 B) (Z4 Z2) (A Z4) (Z3 A) (Z3 C) (Z3 Z2) (B Z3) (C Z1) (Z2 A) (Z2 B) (Z2 C) (Z1 Z4) (Z1 Z2))))
    ((NIL (A) (B) (A C) (B C) (A B C))
     (MAKE-AAF '(A B C Z1 Z2 Z3 Z4)
      '((Z4 B) (Z4 C) (A Z4) (Z3 Z4) (Z3 Z1) (B Z1) (Z2 A) (Z2 B) (Z2 Z2) (C Z3) (Z1 A) (Z1 C))))))
  
(defun ud3-interesting-witnessed ()
  (mapcar #'first *ud3-witnesses*))

;;;
;;;  Find Realized
;;;

(defun ud3-realize (es)
  (let ((sources '(case-study-4-interesting-realizable-types
		   ud3-interesting-witnessed
		   case-study-1-interesting-realizable
		   case-study-2-interesting-realizable
		   ud3-c1-constructed)))
    (dolist (source sources)
      (let ((found (find es (funcall source) :test #'isomorphic-extensions)))
	(when found
	  (return-from nil
	    (values
	     (cond ((eq source 'case-study-1-interesting-realizable)
		    (augment-framework
		     (construct-ud-simple-base-framework '(a b c))
		     () (cs-12-attacks found *ud3-simple-basefw-statistics*)))
		   ((eq source 'case-study-2-interesting-realizable)
		    (augment-framework
		     (construct-ud-base-framework '(a b c))
		     () (cs-12-attacks found *ud3-basefw-statistics*)))
		   ((eq source 'ud3-c1-constructed)
		    (apply #'construct 'ud3-c1
			   (second (find found (ud3-c1-expressivity) :test #'set-equal :key #'first))))
		   ((eq source 'ud3-interesting-witnessed)
		    (eval (second (find found *ud3-witnesses* :test #'set-equal :key #'first))))
		   ((eq source 'case-study-4-interesting-realizable-types)
		    (eval (second (find found *loop-base-statistics*
					:test #'isomorphic-extensions :key #'first)))))
	     source)))))))

;;;
;;;  All realized so far, and all potentially realizable
;;;

(defun ud3-all-interesting-potentially-realizable ()
  (remove-if #'disjointly-supported-p (remove-if-not #'three-arg-p (power-set (power-set '(a b c))))))

(defun ud3-all-interesting-potentially-realizable-types ()
  (sort
   (remove-duplicates (ud3-all-interesting-potentially-realizable) :test #'isomorphic-extensions)
   #'< :key #'length))

(defun ud3-all-interesting-realized-types ()
  (sort
   (remove-duplicates 
    (union (ud3-all-interesting-realized-in-cs) (ud3-interesting-witnessed)
	   :test #'es-equal)
    :test #'isomorphic-extensions)
   #'< :key #'length))

(defun ud3-all-interesting-unrealized-types ()
  (sort
   (remove-duplicates
    (reduce (lambda (es1 es2) (set-difference es1 es2 :test #'isomorphic-extensions))
	    (list (ud3-all-interesting-potentially-realizable)
		  (ud3-all-interesting-realized-in-cs)
		  (ud3-interesting-witnessed)))
    :test #'isomorphic-extensions)
   #'< :key #'length))

;;;
;;;  Find Unrealized
;;;

(defun find-ud3-unrealized (&key (num-threads 8))
  (let* ((wanted (ud3-all-interesting-unrealized-types))
	 (result (find-framework-with-extensions
		  :ess wanted :semantics #'undisputed-extensions :num-threads num-threads
		  :num-repeats 100000)))
    (when result
      (let* ((aaf (result-aaf result))
	     (ud (undisputed-extensions aaf)))
	(if (member ud wanted :test #'isomorphic-extensions)
	    (push (list ud (aaf-form aaf)) *ud3-witnesses*)
	    (format t " Unwanted: ~s~%" ud))))))

;; speed: ~320/s
(defun find-all-ud3-unrealized (&key (num-threads 8))
  (let ((len (length (ud3-all-interesting-unrealized-types))))
    (loop while (= len (length (ud3-all-interesting-unrealized-types))) do
      (format t "~s~%" *ud3-witnesses*)
      (format t "~% ** ~s found, ~s to go **~%"
	      (length *ud3-witnesses*)
	      (length (ud3-all-interesting-unrealized-types)))
      (find-ud3-unrealized :num-threads num-threads))
    (values (first *ud3-witnesses*)
	    (length *ud3-witnesses*))))
;;;
;;;  Print Results
;;;

(defun print-extension-sets (es &optional (out t))
  (format out "~{~s~%~}" (sort (mapcar (lambda (s) (sort s #'< :key #'length))
				       es)
			       #'< :key #'length)))
(defun all-three-arg-types ()
  (sort (mapcar #'sort-extension-set
		(mapcar #'canonicalize-es
			(remove-duplicates
			 (power-set (power-set '(a b c))) :test #'isomorphic-extensions)))
	#'< :key #'length))

(defun cs-12-attacks (es statistics)
  (getf (find (set-difference (power-set '(a b c)) es :test #'set-equal)
	      statistics :key (lambda (x) (getf x :removed))
			 :test #'set-equal)
	:attacks))

(defun print-case-study-results (&key (statistics *ud3-simple-basefw-statistics*)
				      (realizable (case-study-1-interesting-realizable)))
  (let ((s (with-output-to-string (out)
	     (let ((es1 (sort (intersection (remove-if #'disjointly-supported-p (all-three-arg-types))
					    realizable :test #'es-equal) #'< :key #'length)))
	       (dolist (es es1)
		 (let ((attacks
			 (mapcar (lambda (pair)
				   (destructuring-bind (a b) pair
				     (format nil "$~a\\att ~a$" (simple-node-label a)
					     (simple-node-label b))))
				 (cs-12-attacks es statistics))))
		   (format out "$~a$ & " (print-extension-set es nil))
		   (format out "~{~a~^, ~}" attacks)
		   (format out "\\\\~%")))))))
    (with-open-file (out "cs-results.tex" :direction :output :if-exists :supersede :if-does-not-exist :create)
      (format out "\\begin{tabular}{l|l}~%")
      (princ s out)
      (format out "\\end{tabular}~%"))
    (princ s) nil))

(defun %loop-base-statistics-printable ()
  (mapcar (lambda (stat)
	    (destructuring-bind (es form) stat
	      (let ((aaf (rename-nodes (eval form) '((z1 za) (z2 zb) (z3 zc) (x z1)))))
		(list es (aaf-form aaf)))))
	  *loop-base-statistics*))

(defun print-case-study-4-results ()
  (let ((s (with-output-to-string (out)
	     (dolist (subj
		      (sort (remove-if (lambda (x)
					 (member (first x)
						 (ud3-all-interesting-realized-in-cs-123)
						 :test #'isomorphic-extensions))
				       (%loop-base-statistics-printable))
			    #'< :key (lambda (x) (length (first x)))))
	       (let* ((aaf (eval (second subj)))
		      (attacks
			(mapcar (lambda (pair)
				  (destructuring-bind (a b) pair
				    (format nil "$~a\\att ~a$" (simple-node-label a)
					    (simple-node-label b))))
				(butlast (aaf-attacks aaf) 11))))
		 (%print-packed-es out (first subj) 6)
		 (format out "\\makecell[lt]{~{~{~a~^, ~}~^,\\\\~%\\quad~}}" (%pack-n attacks 5))
		 (format out "\\\\~%"))))))
    (with-open-file (out "cs-results.tex" :direction :output :if-exists :supersede :if-does-not-exist :create)
      (princ s out))
    (princ s) nil))

(defun ud3-c1-new-types ()
  (remove-duplicates
   (remove-if-not
    #'three-arg-p
    (set-difference (ud3-c1-constructed) (case-study-2-interesting-realizable) :test #'es-equal))
   :test #'isomorphic-extensions))

(defun ud3-c1-new-constructions ()
  (let ((ess (ud3-c1-expressivity)))
    (mapcar (lambda (es)
	      (find es ess :key #'first :test #'es-equal))
	    (ud3-c1-new-types))))

(defun print-ud3-c1-new-constructions ()
  (let* ((constrs (ud3-c1-new-constructions))
	 (s (with-output-to-string (out)
	      (dolist (constr constrs)
		(destructuring-bind (es flags) constr
		  (format out "\\makecell[lt]{$~a$} &\\makecell[lt]{ " (print-extension-set es nil))
		  (let ((transl '((:aa ("\\hat\\alpha(z_{a2})"))
				  (:bb ("\\hat\\alpha(z_{b2})"))
				  (:cc ("\\hat\\alpha(z_{c2})"))
				  (:azb ("\\alpha(a,z_{b2})"))
				  (:bza ("\\alpha(b,z_{a2})"))
				  (:bzc ("\\alpha(b,z_{c2})"))
				  (:czb ("\\alpha(c,z_{b2})"))
				  (:azc ("\\alpha(a,z_{c2})"))
				  (:cza ("\\alpha(c,z_{a2})"))
				  (:axb ("\\alpha(a,b)" "\\hat\\alpha(z_{a1})" "\\hat\\alpha(z_{b1})" "\\hat\\alpha(z_{a2})" "\\hat\\alpha(z_{b2})"))
				  (:bxc ("\\alpha(b,c)" "\\hat\\alpha(z_{b1})" "\\hat\\alpha(z_{c1})" "\\hat\\alpha(z_{b2})" "\\hat\\alpha(z_{c2})"))
				  (:axc ("\\alpha(a,c)" "\\hat\\alpha(z_{a1})" "\\hat\\alpha(z_{c1})" "\\hat\\alpha(z_{a2})" "\\hat\\alpha(z_{c2})"))
				  (:amb ("\\mu(\\{z_{a2},z_{b2},z\\},z)"))
				  (:amc ("\\mu(\\{z_{a2},z_{c2},z\\},z)"))
				  (:bmc ("\\mu(\\{z_{b2},z_{c2},z\\},z)"))
				  (:a0 ("\\delta(\\{z_{a1},z_{a2},z\\})"))
				  (:b0 ("\\delta(\\{z_{b1},z_{b2},z\\})"))
				  (:c0 ("\\delta(\\{z_{c1},z_{c2},z\\})"))
				  )))
		    (dolist (tr (reverse transl))
		      (destructuring-bind (key value) tr
			(when (member key flags)
			  (format out "~{$~a$ $\\circ$ ~^~} " value)))))
		  (format out " $F_0$ }\\\\~%"))))))
    (with-open-file (out "cs-results.tex" :direction :output :if-exists :supersede :if-does-not-exist :create)
      (format out "\\begin{tabular}{|l|l|}~%")
      (princ s out)
      (format out "\\end{tabular}~%"))
    (princ s) nil))

(defun %print-packed-es (out es n)
  (format out "\\makecell[lt]{")
  (format out "$\\{$~{~{$~a$~^$,$~}~^$,$\\\\\\quad~%~}$\\}$"
	  (%pack-n
	   (mapcar (lambda (x)
		     (if x
			 (format nil "\\{~{~a~^,~}\\}"
				 (mapcar #'simple-node-label x))
			 "\\emptyset"))
		   (sort (copy-list es) #'< :key #'length))
	   n)
	  #+nil(print-extension-set
		(sort (copy-list es) #'< :key #'length)
		nil)
	  )
  (format out "} &"))

(defun print-ud3-witnesses ()
  (let* ((wits (sort (copy-list *ud3-witnesses*) #'< :key (lambda (w) (length (first w)))))
	 (s (with-output-to-string (out)
	      (dolist (wit wits)
		(destructuring-bind (es form) wit
		  (format out "\\makecell[lt]{")
		  (format out "$\\{$~{~{$~a$~^$,$~}~^$,$\\\\\\quad~%~}$\\}$"
			  (%pack-n
			   (mapcar (lambda (x)
				     (if x
					 (format nil "\\{~{~a~^,~}\\}"
						 (mapcar #'simple-node-label x))
					 "\\emptyset"))
				   (sort (copy-list es) #'< :key #'length))
			   5)
			 #+nil(print-extension-set
			   (sort (copy-list es) #'< :key #'length)
			   nil)
			 )
		  (format out "} &")
		  (destructuring-bind (make-aaf args atts) form
		    (declare (ignore make-aaf))
		    (setq args (second args) atts (second atts))
		    (format out "\\makecell[lt]{")
		    (format out "$(~a$$,$\\\\~%" (print-set (mapcar #'simple-node-label args) nil))
		    (format out "\\hspace{1.5mm}$\\{$")
		    (format out "~{$~{(~{~a~^,~})~^,~}$~^$,$\\\\~%\\hspace{3.5mm}~}" (%pack-n (mapcar (lambda (att)
							  (mapcar #'simple-node-label att))
							atts)
						6)) 
		    (format out "$\\})$")
		    (format out "}\\\\~%")
		    ))))))
    (with-open-file (out "cs-results.tex" :direction :output :if-exists :supersede :if-does-not-exist :create)
      (princ s out))
    (princ s) nil))

(defun %pack-n (xs n)
  (loop while xs collect (loop for i below n while xs collect (pop xs))))

(defun print-ud3-all-missing-realisable-types ()
  (format nil "~{~a~^, ~}"
	  (mapcar (lambda (es) (print-extension-set es nil))
		  (sort (ud3-all-interesting-unrealized-types) #'< :key #'length))))
